package java.util.logging;

import java.lang.ref.WeakReference;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.Objects;
import java.util.ResourceBundle;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.function.Supplier;
import jdk.internal.logger.DefaultLoggerFinder;
import jdk.internal.misc.JavaUtilResourceBundleAccess;
import jdk.internal.misc.SharedSecrets;
import jdk.internal.reflect.CallerSensitive;
import jdk.internal.reflect.Reflection;

import org.checkerframework.checker.confidential.qual.NonConfidential;

public class Logger {

    public void config(@NonConfidential String msg);

    public void config(@NonConfidential Supplier<String> msgSupplier);

    public void fine(@NonConfidential String msg);

    public void fine(@NonConfidential Supplier<String> msgSupplier);

    public void finer(@NonConfidential String msg);

    public void finer(@NonConfidential Supplier<String> msgSupplier);

    public void finest(@NonConfidential String msg);

    public void finest(@NonConfidential Supplier<String> msgSupplier);

    public void info(@NonConfidential String msg);

    public void info(@NonConfidential Supplier<String> msgSupplier);

    public void log(@NonConfidential LogRecord record);

    public void log(Level level, @NonConfidential String msg);

    public void log(Level level, @NonConfidential Supplier<String> msgSupplier);

    public void log(Level level, @NonConfidential String msg, Object param1);

    public void log(Level level, @NonConfidential String msg, Object[] params);

    public void log(Level level, @NonConfidential String msg, @NonConfidential Throwable thrown);

    public void log(Level level, @NonConfidential Throwable thrown, @NonConfidential Supplier<String> msgSupplier);

    public void logp(Level level, @NonConfidential String sourceClass, @NonConfidential String sourceMethod, @NonConfidential String msg);

    public void logp(Level level, @NonConfidential String sourceClass, @NonConfidential String sourceMethod, @NonConfidential Supplier<String> msgSupplier);

    public void logp(Level level, @NonConfidential String sourceClass, @NonConfidential String sourceMethod, @NonConfidential String msg, Object param1);

    public void logp(Level level, @NonConfidential String sourceClass, @NonConfidential String sourceMethod, @NonConfidential String msg, Object[] params);

    public void logp(Level level, @NonConfidential String sourceClass, @NonConfidential String sourceMethod, @NonConfidential String msg, @NonConfidential Throwable thrown);

    public void logp(Level level, @NonConfidential String sourceClass, @NonConfidential String sourceMethod, @NonConfidential Throwable thrown, @NonConfidential Supplier<String> msgSupplier);

    public void logrb(Level level, @NonConfidential String sourceClass, @NonConfidential String sourceMethod, ResourceBundle bundle, @NonConfidential String msg, Object... params);

    public void logrb(Level level, ResourceBundle bundle, @NonConfidential String msg, Object... params);

    public void logrb(Level level, @NonConfidential String sourceClass, @NonConfidential String sourceMethod, ResourceBundle bundle, @NonConfidential String msg, @NonConfidential Throwable thrown);

    public void logrb(Level level, ResourceBundle bundle, @NonConfidential String msg, @NonConfidential Throwable thrown);

    public void severe(@NonConfidential String msg);

    public void severe(@NonConfidential Supplier<String> msgSupplier);

    public void warning(@NonConfidential String msg);

    public void warning(@NonConfidential Supplier<String> msgSupplier);
}
