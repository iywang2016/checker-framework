package org.apache.logging.log4j;

import org.apache.logging.log4j.message.EntryMessage;
import org.apache.logging.log4j.message.FlowMessageFactory;
import org.apache.logging.log4j.message.Message;
import org.apache.logging.log4j.message.MessageFactory;
import org.apache.logging.log4j.message.MessageFactory2;
import org.apache.logging.log4j.util.MessageSupplier;
import org.apache.logging.log4j.util.Supplier;

import org.checkerframework.checker.confidential.qual.NonConfidential;

public interface Logger {

    void error(@NonConfidential Marker marker, @NonConfidential Message message);

    void error(@NonConfidential Marker marker, @NonConfidential Message message, @NonConfidential Throwable throwable);

    void error(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier);

    void error(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void error(@NonConfidential Marker marker, @NonConfidential CharSequence message);

    void error(@NonConfidential Marker marker, @NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void error(@NonConfidential Marker marker, @NonConfidential Object message);

    void error(@NonConfidential Marker marker, @NonConfidential Object message, @NonConfidential Throwable throwable);

    void error(@NonConfidential Marker marker, @NonConfidential String message);

    void error(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Object... params);

    void error(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void error(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Throwable throwable);

    void error(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier);

    void error(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void error(@NonConfidential Message message);

    void error(@NonConfidential Message message, @NonConfidential Throwable throwable);

    void error(@NonConfidential MessageSupplier messageSupplier);

    void error(@NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void error(@NonConfidential CharSequence message);

    void error(@NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void error(@NonConfidential Object message);

    void error(@NonConfidential Object message, @NonConfidential Throwable throwable);

    void error(@NonConfidential String message);

    void error(@NonConfidential String message, @NonConfidential Object... params);

    void error(@NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void error(@NonConfidential String message, @NonConfidential Throwable throwable);

    void error(@NonConfidential Supplier<?> messageSupplier);

    void error(@NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void error(@NonConfidential Marker marker, @NonConfidential String message, Object p0);

    void error(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1);

    void error(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2);

    void error(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void error(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void error(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void error(
            @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void error(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7);

    void error(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void error(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void error(@NonConfidential String message, Object p0);

    void error(@NonConfidential String message, Object p0, Object p1);

    void error(@NonConfidential String message, Object p0, Object p1, Object p2);

    void error(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void error(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void error(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void error(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void error(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7);

    void error(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void error(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void info(@NonConfidential Marker marker, @NonConfidential Message message);

    void info(@NonConfidential Marker marker, @NonConfidential Message message, @NonConfidential Throwable throwable);

    void info(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier);

    void info(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void info(@NonConfidential Marker marker, @NonConfidential CharSequence message);

    void info(@NonConfidential Marker marker, @NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void info(@NonConfidential Marker marker, @NonConfidential Object message);

    void info(@NonConfidential Marker marker, @NonConfidential Object message, @NonConfidential Throwable throwable);

    void info(@NonConfidential Marker marker, @NonConfidential String message);

    void info(@NonConfidential Marker marker, @NonConfidential String message, Object... params);

    void info(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void info(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Throwable throwable);

    void info(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier);

    void info(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void info(@NonConfidential Message message);

    void info(@NonConfidential Message message, @NonConfidential Throwable throwable);

    void info(@NonConfidential MessageSupplier messageSupplier);

    void info(@NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void info(@NonConfidential CharSequence message);

    void info(@NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void info(@NonConfidential Object message);

    void info(@NonConfidential Object message, @NonConfidential Throwable throwable);

    void info(@NonConfidential String message);

    void info(@NonConfidential String message, Object... params);

    void info(@NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void info(@NonConfidential String message, @NonConfidential Throwable throwable);

    void info(@NonConfidential Supplier<?> messageSupplier);

    void info(@NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void info(@NonConfidential Marker marker, @NonConfidential String message, Object p0);

    void info(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1);

    void info(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2);

    void info(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void info(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void info(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void info(
            @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void info(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7);

    void info(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void info(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void info(@NonConfidential String message, Object p0);

    void info(@NonConfidential String message, Object p0, Object p1);

    void info(@NonConfidential String message, Object p0, Object p1, Object p2);

    void info(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void info(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void info(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void info(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void info(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7);

    void info(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void info(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void catching(Level level, @NonConfidential Throwable throwable);

    void catching(@NonConfidential Throwable throwable);

    void debug(@NonConfidential Marker marker, @NonConfidential Message message);

    void debug(@NonConfidential Marker marker, @NonConfidential Message message, @NonConfidential Throwable throwable);

    void debug(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier);

    void debug(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void debug(@NonConfidential Marker marker, @NonConfidential CharSequence message);

    void debug(@NonConfidential Marker marker, @NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void debug(@NonConfidential Marker marker, @NonConfidential Object message);

    void debug(@NonConfidential Marker marker, @NonConfidential Object message, @NonConfidential Throwable throwable);

    void debug(@NonConfidential Marker marker, @NonConfidential String message);

    void debug(@NonConfidential Marker marker, @NonConfidential String message, Object... params);

    void debug(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void debug(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Throwable throwable);

    void debug(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier);

    void debug(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void debug(@NonConfidential Message message);

    void debug(@NonConfidential Message message, @NonConfidential Throwable throwable);

    void debug(@NonConfidential MessageSupplier messageSupplier);

    void debug(@NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void debug(@NonConfidential CharSequence message);

    void debug(@NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void debug(@NonConfidential Object message);

    void debug(@NonConfidential Object message, @NonConfidential Throwable throwable);

    void debug(@NonConfidential String message);

    void debug(@NonConfidential String message, Object... params);

    void debug(@NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void debug(@NonConfidential String message, @NonConfidential Throwable throwable);

    void debug(@NonConfidential Supplier<?> messageSupplier);

    void debug(@NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void debug(@NonConfidential Marker marker, @NonConfidential String message, Object p0);

    void debug(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1);

    void debug(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2);

    void debug(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void debug(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void debug(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void debug(
            @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void debug(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7);

    void debug(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void debug(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void debug(@NonConfidential String message, Object p0);

    void debug(@NonConfidential String message, Object p0, Object p1);

    void debug(@NonConfidential String message, Object p0, Object p1, Object p2);

    void debug(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void debug(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void debug(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void debug(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void debug(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7);

    void debug(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void debug(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void fatal(@NonConfidential Marker marker, @NonConfidential Message message);

    void fatal(@NonConfidential Marker marker, @NonConfidential Message message, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier);

    void fatal(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential Marker marker, @NonConfidential CharSequence message);

    void fatal(@NonConfidential Marker marker, @NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential Marker marker, @NonConfidential Object message);

    void fatal(@NonConfidential Marker marker, @NonConfidential Object message, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message, Object... params);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier);

    void fatal(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential Message message);

    void fatal(@NonConfidential Message message, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential MessageSupplier messageSupplier);

    void fatal(@NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential CharSequence message);

    void fatal(@NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential Object message);

    void fatal(@NonConfidential Object message, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential String message);

    void fatal(@NonConfidential String message, Object... params);

    void fatal(@NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void fatal(@NonConfidential String message, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential Supplier<?> messageSupplier);

    void fatal(@NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message, Object p0);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void fatal(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void fatal(
            @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void fatal(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7);

    void fatal(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void fatal(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void fatal(@NonConfidential String message, Object p0);

    void fatal(@NonConfidential String message, Object p0, Object p1);

    void fatal(@NonConfidential String message, Object p0, Object p1, Object p2);

    void fatal(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void fatal(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void fatal(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void fatal(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void fatal(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7);

    void fatal(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void fatal(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential Message message);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential Message message, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential CharSequence message);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential Object message);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential Object message, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential String message);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential String message, Object... params);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential Message message);

    void log(Level level, @NonConfidential Message message, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential MessageSupplier messageSupplier);

    void log(Level level, @NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential CharSequence message);

    void log(Level level, @NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential Object message);

    void log(Level level, @NonConfidential Object message, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential String message);

    void log(Level level, @NonConfidential String message, Object... params);

    void log(Level level, @NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void log(Level level, @NonConfidential String message, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential Supplier<?> messageSupplier);

    void log(Level level, @NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential String message, Object p0);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void log(Level level, @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void log(
            Level level,
            Marker marker,
            String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5);

    void log(
            Level level,
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6);

    void log(
            Level level,
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7);

    void log(
            Level level,
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void log(
            Level level,
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void log(Level level, @NonConfidential String message, Object p0);

    void log(Level level, @NonConfidential String message, Object p0, Object p1);

    void log(Level level, @NonConfidential String message, Object p0, Object p1, Object p2);

    void log(Level level, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void log(Level level, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void log(Level level, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void log(Level level, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void log(
            Level level,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7);

    void log(
            Level level,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void log(
            Level level,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    default void logMessage(
                final Level level,
                final @NonConfidential Marker marker,
                final @NonConfidential String fqcn,
                final @NonConfidential StackTraceElement location,
                final @NonConfidential Message message,
                final @NonConfidential Throwable throwable);

    void printf(Level level, @NonConfidential Marker marker, @NonConfidential String format, Object... params);

    void printf(Level level, @NonConfidential String format, Object... params);

    void trace(@NonConfidential Marker marker, @NonConfidential Message message);

    void trace(@NonConfidential Marker marker, @NonConfidential Message message, @NonConfidential Throwable throwable);

    void trace(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier);

    void trace(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void trace(@NonConfidential Marker marker, @NonConfidential CharSequence message);

    void trace(@NonConfidential Marker marker, @NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void trace(@NonConfidential Marker marker, @NonConfidential Object message);

    void trace(@NonConfidential Marker marker, @NonConfidential Object message, @NonConfidential Throwable throwable);

    void trace(@NonConfidential Marker marker, @NonConfidential String message);

    void trace(@NonConfidential Marker marker, @NonConfidential String message, Object... params);

    void trace(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void trace(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Throwable throwable);

    void trace(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier);

    void trace(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void trace(@NonConfidential Message message);

    void trace(@NonConfidential Message message, @NonConfidential Throwable throwable);

    void trace(@NonConfidential MessageSupplier messageSupplier);

    void trace(@NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void trace(@NonConfidential CharSequence message);

    void trace(@NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void trace(@NonConfidential Object message);

    void trace(@NonConfidential Object message, @NonConfidential Throwable throwable);

    void trace(@NonConfidential String message);

    void trace(@NonConfidential String message, Object... params);

    void trace(@NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void trace(@NonConfidential String message, @NonConfidential Throwable throwable);

    void trace(@NonConfidential Supplier<?> messageSupplier);

    void trace(@NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void trace(@NonConfidential Marker marker, @NonConfidential String message, Object p0);

    void trace(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1);

    void trace(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2);

    void trace(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void trace(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void trace(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void trace(
            @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void trace(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7);

    void trace(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void trace(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void trace(@NonConfidential String message, Object p0);

    void trace(@NonConfidential String message, Object p0, Object p1);

    void trace(@NonConfidential String message, Object p0, Object p1, Object p2);

    void trace(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void trace(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void trace(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void trace(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void trace(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7);

    void trace(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void trace(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void warn(@NonConfidential Marker marker, @NonConfidential Message message);

    void warn(@NonConfidential Marker marker, @NonConfidential Message message, @NonConfidential Throwable throwable);

    void warn(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier);

    void warn(@NonConfidential Marker marker, @NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void warn(@NonConfidential Marker marker, @NonConfidential CharSequence message);

    void warn(@NonConfidential Marker marker, @NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void warn(@NonConfidential Marker marker, @NonConfidential Object message);

    void warn(@NonConfidential Marker marker, @NonConfidential Object message, @NonConfidential Throwable throwable);

    void warn(@NonConfidential Marker marker, @NonConfidential String message);

    void warn(@NonConfidential Marker marker, @NonConfidential String message, Object... params);

    void warn(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void warn(@NonConfidential Marker marker, @NonConfidential String message, @NonConfidential Throwable throwable);

    void warn(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier);

    void warn(@NonConfidential Marker marker, @NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void warn(@NonConfidential Message message);

    void warn(@NonConfidential Message message, @NonConfidential Throwable throwable);

    void warn(@NonConfidential MessageSupplier messageSupplier);

    void warn(@NonConfidential MessageSupplier messageSupplier, @NonConfidential Throwable throwable);

    void warn(@NonConfidential CharSequence message);

    void warn(@NonConfidential CharSequence message, @NonConfidential Throwable throwable);

    void warn(@NonConfidential Object message);

    void warn(@NonConfidential Object message, @NonConfidential Throwable throwable);

    void warn(@NonConfidential String message);

    void warn(@NonConfidential String message, Object... params);

    void warn(@NonConfidential String message, @NonConfidential Supplier<?>... paramSuppliers);

    void warn(@NonConfidential String message, @NonConfidential Throwable throwable);

    void warn(@NonConfidential Supplier<?> messageSupplier);

    void warn(@NonConfidential Supplier<?> messageSupplier, @NonConfidential Throwable throwable);

    void warn(@NonConfidential Marker marker, @NonConfidential String message, Object p0);

    void warn(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1);

    void warn(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2);

    void warn(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void warn(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void warn(@NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void warn(
            @NonConfidential Marker marker, @NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void warn(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7);

    void warn(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void warn(
            @NonConfidential Marker marker,
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    void warn(@NonConfidential String message, Object p0);

    void warn(@NonConfidential String message, Object p0, Object p1);

    void warn(@NonConfidential String message, Object p0, Object p1, Object p2);

    void warn(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3);

    void warn(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4);

    void warn(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5);

    void warn(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6);

    void warn(@NonConfidential String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7);

    void warn(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8);

    void warn(
            @NonConfidential String message,
            Object p0,
            Object p1,
            Object p2,
            Object p3,
            Object p4,
            Object p5,
            Object p6,
            Object p7,
            Object p8,
            Object p9);

    <T extends Throwable> T throwing(Level level, @NonConfidential T throwable);

    <T extends Throwable> T throwing(@NonConfidential T throwable);
}
